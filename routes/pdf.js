const express = require('express');
const PDFDocument = require('pdfkit');
const { loadJSON } = require('../utils/fileUtils');
const { roleAuth } = require('../middlewares/sessionAuth');

const FORM_DATA = './data/pending_forms.json';
const router = express.Router();

console.log('[PDF_ROUTER] Initializing PDF router with form data path:', FORM_DATA);

// Enhanced reusable PDF generation function
const generatePdf = (doc, form) => {
  console.log('[GENERATE_PDF] Starting PDF generation for form:', form.formId);

  try {
    const data = form.applicationData || form; // Handle both structures
    console.log('[GENERATE_PDF] Using data structure:', form.applicationData ? 'applicationData' : 'direct form');

    // Header
    console.log('[GENERATE_PDF] Adding header section');
    doc.fontSize(18).fillColor('#2c5aa0').text('No Dues Clearance Form', { align: 'center' }).moveDown(1.5);

    // Form details section
    doc.fontSize(12).fillColor('black');

    // Basic Information
    console.log('[GENERATE_PDF] Adding basic information section');
    doc.fontSize(14).fillColor('#2c5aa0').text('Basic Information', { underline: true }).moveDown(0.5);
    doc.fontSize(10).fillColor('black');

    const basicInfo = {
      formId: form.formId || 'N/A',
      name: data.name || form.name || 'N/A',
      employeeId: form.employeeId || 'N/A',
      department: data.department || form.department || 'N/A',
      noDuesType: data.noDuesType || form.noDuesType || 'N/A',
      email: data.email || form.email || 'N/A'
    };

    console.log('[GENERATE_PDF] Basic info to include:', basicInfo);

    doc.text(`Form ID: ${basicInfo.formId}`);
    doc.text(`Name: ${basicInfo.name}`);
    doc.text(`Employee ID: ${basicInfo.employeeId}`);
    doc.text(`Department: ${basicInfo.department}`);
    doc.text(`No Dues Type: ${basicInfo.noDuesType}`);
    doc.text(`Email: ${basicInfo.email}`).moveDown(0.8);

    // Status Information
    console.log('[GENERATE_PDF] Adding status information section');
    doc.fontSize(14).fillColor('#2c5aa0').text('Status Information', { underline: true }).moveDown(0.5);
    doc.fontSize(10).fillColor('black');

    const statusInfo = {
      submittedAt: form.submissionDate || form.appliedAt || 'N/A',
      status: form.status || 'N/A',
      reviewedAt: form.reviewedAt,
      remark: form.remark
    };

    console.log('[GENERATE_PDF] Status info to include:', statusInfo);

    doc.text(`Submitted At: ${statusInfo.submittedAt}`);
    doc.text(`Current Status: ${statusInfo.status}`);
    if (statusInfo.reviewedAt) {
      doc.text(`Reviewed At: ${statusInfo.reviewedAt}`);
      console.log('[GENERATE_PDF] Added review date');
    }
    if (statusInfo.remark && statusInfo.remark.trim()) {
      doc.text(`Remarks: ${statusInfo.remark}`);
      console.log('[GENERATE_PDF] Added remarks');
    }

    // Footer
    console.log('[GENERATE_PDF] Adding footer section');
    doc.moveDown(2);
    doc.fontSize(8).fillColor('gray').text('Generated by No Dues Management System', { align: 'center' });
    doc.text(`Generated on: ${new Date().toLocaleDateString('en-IN')}`, { align: 'center' });

    console.log('[GENERATE_PDF] ✅ PDF content generation completed successfully');

  } catch (error) {
    console.error('[GENERATE_PDF] ❌ Error generating PDF content:', error.message);
    console.error('[GENERATE_PDF] Stack trace:', error.stack);
    doc.fontSize(12).text('Error generating form content');
  }
};

// Input validation middleware
const validateFormRequest = (req, res, next) => {
  console.log('[VALIDATE_FORM] Validating form request');

  const { formId } = req.params;
  console.log('[VALIDATE_FORM] Form ID received:', formId);

  if (!formId || formId.trim() === '') {
    console.log('[VALIDATE_FORM] ❌ Invalid form ID provided');
    return res.status(400).json({
      success: false,
      message: 'Invalid form ID provided'
    });
  }

  console.log('[VALIDATE_FORM] ✅ Form ID validation passed');
  next();
};

// Enhanced error handling for PDF generation
const handlePDFError = (error, res, operation = 'PDF generation') => {
  console.error(`[PDF_ERROR] ❌ ${operation} error:`, error.message);
  console.error(`[PDF_ERROR] Stack trace:`, error.stack);

  if (!res.headersSent) {
    console.log('[PDF_ERROR] Sending error response');
    return res.status(500).json({
      success: false,
      message: `Failed to ${operation.toLowerCase()}`,
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  } else {
    console.log('[PDF_ERROR] Headers already sent, cannot send error response');
  }
};

// Download specific form by ID
router.get('/download/:formId', roleAuth('employee'), validateFormRequest, (req, res) => {
  console.log('[PDF_DOWNLOAD] GET /download/:formId request from IP:', req.ip);

  const { formId } = req.params;
  const { id: employeeId, employeeId: altEmployeeId } = req.session.user;
  const actualEmployeeId = employeeId || altEmployeeId;

  console.log('[PDF_DOWNLOAD] Processing download for form:', formId);
  console.log('[PDF_DOWNLOAD] Employee ID:', actualEmployeeId);
  console.log('[PDF_DOWNLOAD] User session details:', {
    name: req.session.user.name,
    role: req.session.user.role
  });

  try {
    console.log('[PDF_DOWNLOAD] Loading form data from:', FORM_DATA);
    const forms = loadJSON(FORM_DATA);
    console.log('[PDF_DOWNLOAD] Total forms loaded:', forms.length);

    const form = forms.find(f => f.formId === formId && f.employeeId === actualEmployeeId);

    if (!form) {
      console.warn('[PDF_DOWNLOAD] ⚠️ Form not found for formId:', formId, 'employeeId:', actualEmployeeId);
      console.log('[PDF_DOWNLOAD] Available forms for employee:', forms.filter(f => f.employeeId === actualEmployeeId).map(f => f.formId));
      return res.status(404).json({
        success: false,
        message: 'Form not found or access denied'
      });
    }

    console.log('[PDF_DOWNLOAD] ✅ Form found:', {
      formId: form.formId,
      status: form.status,
      submissionDate: form.submissionDate
    });

    console.log('[PDF_DOWNLOAD] Creating PDF document');
    const doc = new PDFDocument({
      bufferPages: true,
      autoFirstPage: true
    });

    // Set headers for download
    console.log('[PDF_DOWNLOAD] Setting response headers for download');
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="No-Dues-${formId}.pdf"`);
    res.setHeader('Cache-Control', 'no-cache');

    // Handle PDF streaming errors
    doc.on('error', (error) => {
      console.error('[PDF_DOWNLOAD] ❌ PDF streaming error:', error.message);
      handlePDFError(error, res, 'PDF streaming');
    });

    console.log('[PDF_DOWNLOAD] Starting PDF stream to response');
    // Pipe the PDF to the response
    doc.pipe(res);

    // Generate PDF content
    generatePdf(doc, form);

    // Finalize the PDF
    console.log('[PDF_DOWNLOAD] Finalizing PDF document');
    doc.end();

    console.log('[PDF_DOWNLOAD] ✅ PDF download initiated successfully for form:', formId);

  } catch (error) {
    console.error('[PDF_DOWNLOAD] ❌ Unexpected error during PDF download:', error.message);
    handlePDFError(error, res, 'PDF generation');
  }
});

// Direct access to form PDF by ID (for viewing)
router.get('/:formId', roleAuth('employee'), validateFormRequest, (req, res) => {
  console.log('[PDF_VIEW] GET /:formId request from IP:', req.ip);

  const { formId } = req.params;
  const { id: employeeId, employeeId: altEmployeeId } = req.session.user;
  const actualEmployeeId = employeeId || altEmployeeId;

  console.log('[PDF_VIEW] Processing view for form:', formId);
  console.log('[PDF_VIEW] Employee ID:', actualEmployeeId);

  try {
    console.log('[PDF_VIEW] Loading form data from:', FORM_DATA);
    const forms = loadJSON(FORM_DATA);
    console.log('[PDF_VIEW] Total forms loaded:', forms.length);

    const form = forms.find(f => f.formId === formId && f.employeeId === actualEmployeeId);

    if (!form) {
      console.warn('[PDF_VIEW] ⚠️ Form not found for formId:', formId, 'employeeId:', actualEmployeeId);
      console.log('[PDF_VIEW] Available forms for employee:', forms.filter(f => f.employeeId === actualEmployeeId).map(f => f.formId));
      return res.status(404).json({
        success: false,
        message: 'Form not found or access denied'
      });
    }

    console.log('[PDF_VIEW] ✅ Form found for viewing:', {
      formId: form.formId,
      status: form.status,
      name: form.name
    });

    console.log('[PDF_VIEW] Creating PDF document for inline viewing');
    const doc = new PDFDocument({
      bufferPages: true,
      autoFirstPage: true
    });

    // Set headers for inline viewing
    console.log('[PDF_VIEW] Setting response headers for inline viewing');
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `inline; filename="No-Dues-${formId}.pdf"`);
    res.setHeader('Cache-Control', 'no-cache');

    // Handle PDF streaming errors
    doc.on('error', (error) => {
      console.error('[PDF_VIEW] ❌ PDF streaming error:', error.message);
      handlePDFError(error, res, 'PDF streaming');
    });

    console.log('[PDF_VIEW] Starting PDF stream to response');
    // Pipe the PDF to the response
    doc.pipe(res);

    // Generate PDF content
    generatePdf(doc, form);

    // Finalize the PDF
    console.log('[PDF_VIEW] Finalizing PDF document');
    doc.end();

    console.log('[PDF_VIEW] ✅ PDF view initiated successfully for form:', formId);

  } catch (error) {
    console.error('[PDF_VIEW] ❌ Unexpected error during PDF view:', error.message);
    handlePDFError(error, res, 'PDF generation');
  }
});

// Generate PDF for current user's latest form
router.get('/generate/latest', roleAuth('employee'), (req, res) => {
  console.log('[PDF_LATEST] GET /generate/latest request from IP:', req.ip);

  const { id: employeeId, employeeId: altEmployeeId } = req.session.user;
  const actualEmployeeId = employeeId || altEmployeeId;

  console.log('[PDF_LATEST] Generating latest PDF for employee:', actualEmployeeId);
  console.log('[PDF_LATEST] User details:', {
    name: req.session.user.name,
    role: req.session.user.role
  });

  try {
    console.log('[PDF_LATEST] Loading form data from:', FORM_DATA);
    const forms = loadJSON(FORM_DATA);
    console.log('[PDF_LATEST] Total forms loaded:', forms.length);

    // Get the latest form for the employee
    const employeeForms = forms.filter(f => f.employeeId === actualEmployeeId);
    console.log('[PDF_LATEST] Forms found for employee:', employeeForms.length);

    if (employeeForms.length === 0) {
      console.warn('[PDF_LATEST] ⚠️ No forms found for employeeId:', actualEmployeeId);
      return res.status(404).json({
        success: false,
        message: 'No form found for your account'
      });
    }

    console.log('[PDF_LATEST] Employee forms:', employeeForms.map(f => ({
      formId: f.formId,
      submissionDate: f.submissionDate,
      status: f.status
    })));

    // Sort by submission date to get the latest
    const latestForm = employeeForms.sort((a, b) => {
      const dateA = new Date(a.submissionDate || a.lastUpdated || 0);
      const dateB = new Date(b.submissionDate || b.lastUpdated || 0);
      return dateB - dateA;
    })[0];

    console.log('[PDF_LATEST] ✅ Latest form identified:', {
      formId: latestForm.formId,
      submissionDate: latestForm.submissionDate,
      status: latestForm.status
    });

    console.log('[PDF_LATEST] Creating PDF document for latest form');
    const doc = new PDFDocument({
      bufferPages: true,
      autoFirstPage: true
    });

    // Set headers for inline viewing
    console.log('[PDF_LATEST] Setting response headers');
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `inline; filename="No-Dues-Latest.pdf"`);
    res.setHeader('Cache-Control', 'no-cache');

    // Handle PDF streaming errors
    doc.on('error', (error) => {
      console.error('[PDF_LATEST] ❌ PDF streaming error:', error.message);
      handlePDFError(error, res, 'PDF streaming');
    });

    console.log('[PDF_LATEST] Starting PDF stream to response');
    // Pipe the PDF to the response
    doc.pipe(res);

    // Generate PDF content
    generatePdf(doc, latestForm);

    // Finalize the PDF
    console.log('[PDF_LATEST] Finalizing PDF document');
    doc.end();

    console.log('[PDF_LATEST] ✅ Latest PDF generated successfully for employee:', actualEmployeeId);

  } catch (error) {
    console.error('[PDF_LATEST] ❌ Unexpected error during latest PDF generation:', error.message);
    handlePDFError(error, res, 'PDF generation');
  }
});

// Get form details as JSON (for debugging/API access)
router.get('/details/:formId', roleAuth('employee'), validateFormRequest, (req, res) => {
  console.log('[FORM_DETAILS] GET /details/:formId request from IP:', req.ip);

  const { formId } = req.params;
  const { id: employeeId, employeeId: altEmployeeId } = req.session.user;
  const actualEmployeeId = employeeId || altEmployeeId;

  console.log('[FORM_DETAILS] Retrieving details for form:', formId);
  console.log('[FORM_DETAILS] Employee ID:', actualEmployeeId);

  try {
    console.log('[FORM_DETAILS] Loading form data from:', FORM_DATA);
    const forms = loadJSON(FORM_DATA);
    console.log('[FORM_DETAILS] Total forms loaded:', forms.length);

    const form = forms.find(f => f.formId === formId && f.employeeId === actualEmployeeId);

    if (!form) {
      console.warn('[FORM_DETAILS] ⚠️ Form not found for formId:', formId, 'employeeId:', actualEmployeeId);
      return res.status(404).json({
        success: false,
        message: 'Form not found or access denied'
      });
    }

    console.log('[FORM_DETAILS] ✅ Form found, preparing sanitized data');

    // Return sanitized form data
    const sanitizedForm = {
      formId: form.formId,
      name: form.name,
      employeeId: form.employeeId,
      department: form.department,
      noDuesType: form.noDuesType,
      email: form.email,
      status: form.status,
      submissionDate: form.submissionDate,
      lastUpdated: form.lastUpdated,
      remark: form.remark
    };

    console.log('[FORM_DETAILS] Sanitized form data:', sanitizedForm);

    res.json({
      success: true,
      form: sanitizedForm
    });

    console.log('[FORM_DETAILS] ✅ Form details returned successfully');

  } catch (error) {
    console.error('[FORM_DETAILS] ❌ Error retrieving form details:', error.message);
    console.error('[FORM_DETAILS] Stack trace:', error.stack);
    res.status(500).json({
      success: false,
      message: 'Error retrieving form details'
    });
  }
});

console.log('[PDF_ROUTER] PDF router initialization complete with enhanced logging');

module.exports = router;
