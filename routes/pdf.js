const express = require('express');
const PDFDocument = require('pdfkit');
const { loadJSON } = require('../utils/fileUtils');
const { roleAuth } = require('../middlewares/sessionAuth');

const FORM_DATA = './data/pending_forms.json';
const router = express.Router();

// Enhanced reusable PDF generation function
const generatePdf = (doc, form) => {
  try {
    const data = form.applicationData || form; // Handle both structures

    // Header
    doc.fontSize(18).fillColor('#2c5aa0').text('No Dues Clearance Form', { align: 'center' }).moveDown(1.5);

    // Form details section
    doc.fontSize(12).fillColor('black');

    // Basic Information
    doc.fontSize(14).fillColor('#2c5aa0').text('Basic Information', { underline: true }).moveDown(0.5);
    doc.fontSize(10).fillColor('black');
    doc.text(`Form ID: ${form.formId || 'N/A'}`);
    doc.text(`Name: ${data.name || form.name || 'N/A'}`);
    doc.text(`Employee ID: ${form.employeeId || 'N/A'}`);
    doc.text(`Department: ${data.department || form.department || 'N/A'}`);
    doc.text(`No Dues Type: ${data.noDuesType || form.noDuesType || 'N/A'}`);
    doc.text(`Email: ${data.email || form.email || 'N/A'}`).moveDown(0.8);

    // Status Information
    doc.fontSize(14).fillColor('#2c5aa0').text('Status Information', { underline: true }).moveDown(0.5);
    doc.fontSize(10).fillColor('black');
    doc.text(`Submitted At: ${form.submissionDate || form.appliedAt || 'N/A'}`);
    doc.text(`Current Status: ${form.status || 'N/A'}`);
    if (form.reviewedAt) doc.text(`Reviewed At: ${form.reviewedAt}`);
    if (form.remark && form.remark.trim()) doc.text(`Remarks: ${form.remark}`);

    // Footer
    doc.moveDown(2);
    doc.fontSize(8).fillColor('gray').text('Generated by No Dues Management System', { align: 'center' });
    doc.text(`Generated on: ${new Date().toLocaleDateString('en-IN')}`, { align: 'center' });

  } catch (error) {
    console.error('Error generating PDF content:', error);
    doc.fontSize(12).text('Error generating form content');
  }
};

// Input validation middleware
const validateFormRequest = (req, res, next) => {
  const { formId } = req.params;
  if (!formId || formId.trim() === '') {
    return res.status(400).json({
      success: false,
      message: 'Invalid form ID provided'
    });
  }
  next();
};

// Enhanced error handling for PDF generation
const handlePDFError = (error, res, operation = 'PDF generation') => {
  console.error(`${operation} error:`, error);

  if (!res.headersSent) {
    return res.status(500).json({
      success: false,
      message: `Failed to ${operation.toLowerCase()}`,
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'
    });
  }
};

// Download specific form by ID
router.get('/download/:formId', roleAuth('employee'), validateFormRequest, (req, res) => {
  const { formId } = req.params;
  const { id: employeeId, employeeId: altEmployeeId } = req.session.user;
  const actualEmployeeId = employeeId || altEmployeeId;

  try {
    const forms = loadJSON(FORM_DATA);
    const form = forms.find(f => f.formId === formId && f.employeeId === actualEmployeeId);

    if (!form) {
      console.warn(`⚠️ Form not found for formId=${formId}, employeeId=${actualEmployeeId}`);
      return res.status(404).json({
        success: false,
        message: 'Form not found or access denied'
      });
    }

    const doc = new PDFDocument({
      bufferPages: true,
      autoFirstPage: true
    });

    // Set headers for download
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="No-Dues-${formId}.pdf"`);
    res.setHeader('Cache-Control', 'no-cache');

    // Handle PDF streaming errors
    doc.on('error', (error) => {
      handlePDFError(error, res, 'PDF streaming');
    });

    // Pipe the PDF to the response
    doc.pipe(res);

    // Generate PDF content
    generatePdf(doc, form);

    // Finalize the PDF
    doc.end();

    console.log(`✅ PDF generated successfully for form ${formId}`);

  } catch (error) {
    handlePDFError(error, res, 'PDF generation');
  }
});

// Direct access to form PDF by ID (for viewing)
router.get('/:formId', roleAuth('employee'), validateFormRequest, (req, res) => {
  const { formId } = req.params;
  const { id: employeeId, employeeId: altEmployeeId } = req.session.user;
  const actualEmployeeId = employeeId || altEmployeeId;

  try {
    const forms = loadJSON(FORM_DATA);
    const form = forms.find(f => f.formId === formId && f.employeeId === actualEmployeeId);

    if (!form) {
      console.warn(`⚠️ Form not found for formId=${formId}, employeeId=${actualEmployeeId}`);
      return res.status(404).json({
        success: false,
        message: 'Form not found or access denied'
      });
    }

    const doc = new PDFDocument({
      bufferPages: true,
      autoFirstPage: true
    });

    // Set headers for inline viewing
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `inline; filename="No-Dues-${formId}.pdf"`);
    res.setHeader('Cache-Control', 'no-cache');

    // Handle PDF streaming errors
    doc.on('error', (error) => {
      handlePDFError(error, res, 'PDF streaming');
    });

    // Pipe the PDF to the response
    doc.pipe(res);

    // Generate PDF content
    generatePdf(doc, form);

    // Finalize the PDF
    doc.end();

    console.log(`✅ PDF viewed successfully for form ${formId}`);

  } catch (error) {
    handlePDFError(error, res, 'PDF generation');
  }
});

// Generate PDF for current user's latest form
router.get('/generate/latest', roleAuth('employee'), (req, res) => {
  const { id: employeeId, employeeId: altEmployeeId } = req.session.user;
  const actualEmployeeId = employeeId || altEmployeeId;

  try {
    const forms = loadJSON(FORM_DATA);

    // Get the latest form for the employee
    const employeeForms = forms.filter(f => f.employeeId === actualEmployeeId);

    if (employeeForms.length === 0) {
      console.warn(`⚠️ No forms found for employeeId=${actualEmployeeId}`);
      return res.status(404).json({
        success: false,
        message: 'No form found for your account'
      });
    }

    // Sort by submission date to get the latest
    const latestForm = employeeForms.sort((a, b) => {
      const dateA = new Date(a.submissionDate || a.lastUpdated || 0);
      const dateB = new Date(b.submissionDate || b.lastUpdated || 0);
      return dateB - dateA;
    })[0];

    const doc = new PDFDocument({
      bufferPages: true,
      autoFirstPage: true
    });

    // Set headers for inline viewing
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `inline; filename="No-Dues-Latest.pdf"`);
    res.setHeader('Cache-Control', 'no-cache');

    // Handle PDF streaming errors
    doc.on('error', (error) => {
      handlePDFError(error, res, 'PDF streaming');
    });

    // Pipe the PDF to the response
    doc.pipe(res);

    // Generate PDF content
    generatePdf(doc, latestForm);

    // Finalize the PDF
    doc.end();

    console.log(`✅ Latest PDF generated successfully for employee ${actualEmployeeId}`);

  } catch (error) {
    handlePDFError(error, res, 'PDF generation');
  }
});

// Get form details as JSON (for debugging/API access)
router.get('/details/:formId', roleAuth('employee'), validateFormRequest, (req, res) => {
  const { formId } = req.params;
  const { id: employeeId, employeeId: altEmployeeId } = req.session.user;
  const actualEmployeeId = employeeId || altEmployeeId;

  try {
    const forms = loadJSON(FORM_DATA);
    const form = forms.find(f => f.formId === formId && f.employeeId === actualEmployeeId);

    if (!form) {
      return res.status(404).json({
        success: false,
        message: 'Form not found or access denied'
      });
    }

    // Return sanitized form data
    res.json({
      success: true,
      form: {
        formId: form.formId,
        name: form.name,
        employeeId: form.employeeId,
        department: form.department,
        noDuesType: form.noDuesType,
        email: form.email,
        status: form.status,
        submissionDate: form.submissionDate,
        lastUpdated: form.lastUpdated,
        remark: form.remark
      }
    });

  } catch (error) {
    console.error('Error retrieving form details:', error);
    res.status(500).json({
      success: false,
      message: 'Error retrieving form details'
    });
  }
});

module.exports = router;
